function import_wad_file
%-----------------------------------------------------------------------------------------
% IMPORT_WAD_FILE Import numeric data from a .wad AWAC file as column vectors.
%
% Reads data from rows STARTROW through ENDROW of text file FILENAME.
%
% NOTE: Read the <FILENAME>.HDR file for file and variable information
%
% Example of .wad file format:
%  1   Burst counter
%  2   Ensemble counter
%  3   Pressure                         (dbar)
%  4   AST Distance1 (Beam4)            (m)
%  5   AST Distance2 (Beam4)            (m)
%  6   AST Quality (Beam4)              (counts)
%  7   Analog input
%  8   Velocity (Beam1)                 (m/s)
%  9   Velocity (Beam2)                 (m/s)
% 10   Velocity (Beam3)                 (m/s)
% 11   Amplitude (Beam1)                (counts)
% 12   Amplitude (Beam2)                (counts)
% 13   Amplitude (Beam3)                (counts)
%
% Example:
%   = import_wad_file('awac1608wha_1685.wad');
%
% See also TEXTSCAN.
%
% History:
% Auto-generated by MATLAB on 2016/04/28 14:39:39
% 22-Jan-2017 FE Edited for use with process_AWAC.m
%
% NIWA Moorings
%-----------------------------------------------------------------------------------------

%% Initialize variables.
startRow = 1;
endRow = inf;

[filename, pathname] = uigetfile('*.wad','Select a .wadfile to import');
FILENAME = fullfile(pathname, filename);

%% Format string for each line of text:
%   column1: double (%f)
%	column2: double (%f)
%   column3: double (%f)
%	column4: double (%f)
%   column5: double (%f)
%	column6: double (%f)
%   column7: double (%f)
%	column8: double (%f)
%   column9: double (%f)
%	column10: double (%f)
%   column11: double (%f)
%	column12: double (%f)
%   column13: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%5f%6f%8f%8f%8f%6f%6f%9f%9f%9f%6f%6f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(FILENAME,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', '', 'WhiteSpace', '', 'EmptyValue' ,NaN,'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', '', 'WhiteSpace', '', 'EmptyValue' ,NaN,'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
burstCounter = dataArray{:, 1};
ensembleCounter = dataArray{:, 2};
pressure = dataArray{:, 3};
ASTDistance1Beam4 = dataArray{:, 4};
ASTDistance2Beam4 = dataArray{:, 5};
ASTQualityBeam4 = dataArray{:, 6};
analogInput = dataArray{:, 7};
velocityBeam1 = dataArray{:, 8};
velocityBeam2 = dataArray{:, 9};
velocityBeam3 = dataArray{:, 10};
amplitudeBeam1 = dataArray{:, 11};
amplitudeBeam2 = dataArray{:, 12};
amplitudeBeam3 = dataArray{:, 13};


save(fullfile(pathname,[filename(1:end-4) '_wad.mat']),'burstCounter','ensembleCounter',...
    'pressure','ASTDistance1Beam4','ASTDistance2Beam4','ASTQualityBeam4','analogInput',...
    'velocityBeam1','velocityBeam2','velocityBeam3','amplitudeBeam1','amplitudeBeam2',...
    'amplitudeBeam3');


disp(['Saved ' filename ' data to matlab data file ' filename(1:end-4) '_wad.mat'])

